#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



public partial class DBase : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertPoints(Points instance);
  partial void UpdatePoints(Points instance);
  partial void DeletePoints(Points instance);
  partial void InsertPolygons(Polygons instance);
  partial void UpdatePolygons(Polygons instance);
  partial void DeletePolygons(Polygons instance);
  #endregion
	
	public DBase(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBase(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBase(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBase(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Points> Points
	{
		get
		{
			return this.GetTable<Points>();
		}
	}
	
	public System.Data.Linq.Table<Polygons> Polygons
	{
		get
		{
			return this.GetTable<Polygons>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class Points : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _X;
	
	private int _Y;
	
	private int _POLYGON_ID;
	
	private EntityRef<Polygons> _Polygons;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnXChanging(int value);
    partial void OnXChanged();
    partial void OnYChanging(int value);
    partial void OnYChanged();
    partial void OnPOLYGON_IDChanging(int value);
    partial void OnPOLYGON_IDChanged();
    #endregion
	
	public Points()
	{
		this._Polygons = default(EntityRef<Polygons>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X", DbType="Int NOT NULL")]
	public int X
	{
		get
		{
			return this._X;
		}
		set
		{
			if ((this._X != value))
			{
				this.OnXChanging(value);
				this.SendPropertyChanging();
				this._X = value;
				this.SendPropertyChanged("X");
				this.OnXChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y", DbType="Int NOT NULL")]
	public int Y
	{
		get
		{
			return this._Y;
		}
		set
		{
			if ((this._Y != value))
			{
				this.OnYChanging(value);
				this.SendPropertyChanging();
				this._Y = value;
				this.SendPropertyChanged("Y");
				this.OnYChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POLYGON_ID", DbType="Int NOT NULL")]
	public int POLYGON_ID
	{
		get
		{
			return this._POLYGON_ID;
		}
		set
		{
			if ((this._POLYGON_ID != value))
			{
				if (this._Polygons.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPOLYGON_IDChanging(value);
				this.SendPropertyChanging();
				this._POLYGON_ID = value;
				this.SendPropertyChanged("POLYGON_ID");
				this.OnPOLYGON_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Points_Polygons", Storage="_Polygons", ThisKey="POLYGON_ID", OtherKey="ID", IsForeignKey=true)]
	public Polygons Polygons
	{
		get
		{
			return this._Polygons.Entity;
		}
		set
		{
			Polygons previousValue = this._Polygons.Entity;
			if (((previousValue != value) 
						|| (this._Polygons.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Polygons.Entity = null;
					previousValue.Points.Remove(this);
				}
				this._Polygons.Entity = value;
				if ((value != null))
				{
					value.Points.Add(this);
					this._POLYGON_ID = value.ID;
				}
				else
				{
					this._POLYGON_ID = default(int);
				}
				this.SendPropertyChanged("Polygons");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute()]
public partial class Polygons : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _NAME;
	
	private System.Nullable<int> _PARENT_ID;
	
	private EntitySet<Points> _Points;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnPARENT_IDChanging(System.Nullable<int> value);
    partial void OnPARENT_IDChanged();
    #endregion
	
	public Polygons()
	{
		this._Points = new EntitySet<Points>(new Action<Points>(this.attach_Points), new Action<Points>(this.detach_Points));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(100)")]
	public string NAME
	{
		get
		{
			return this._NAME;
		}
		set
		{
			if ((this._NAME != value))
			{
				this.OnNAMEChanging(value);
				this.SendPropertyChanging();
				this._NAME = value;
				this.SendPropertyChanged("NAME");
				this.OnNAMEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PARENT_ID", DbType="Int")]
	public System.Nullable<int> PARENT_ID
	{
		get
		{
			return this._PARENT_ID;
		}
		set
		{
			if ((this._PARENT_ID != value))
			{
				this.OnPARENT_IDChanging(value);
				this.SendPropertyChanging();
				this._PARENT_ID = value;
				this.SendPropertyChanged("PARENT_ID");
				this.OnPARENT_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Points_Polygons", Storage="_Points", ThisKey="ID", OtherKey="POLYGON_ID", DeleteRule="NO ACTION")]
	public EntitySet<Points> Points
	{
		get
		{
			return this._Points;
		}
		set
		{
			this._Points.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Points(Points entity)
	{
		this.SendPropertyChanging();
		entity.Polygons = this;
	}
	
	private void detach_Points(Points entity)
	{
		this.SendPropertyChanging();
		entity.Polygons = null;
	}
}
#pragma warning restore 1591
